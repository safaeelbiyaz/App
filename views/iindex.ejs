<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0"
    content="initial-scale=1,maximum-scale=1,user-scalable=no">
  <title>Sidebar Menu</title>
  <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
  <link rel="stylesheet" href="css/style.css">
</head>

<body>
  <nav>
    <div class="sidebar-top">
      <span class="shrink-btn">
        <i class='bx bx-chevron-left'></i>
      </span>
      <img style="height: 100; width: 200;" src="css/LogoGeoflyEtude.png" class="logo" alt="">
      <h3 class="hide">GEOFLY</h3>
    </div>

    <div class="search">
      <i class='bx bx-search'></i>
      <input type="text" class="hide" placeholder="Quick Search ...">
    </div>

    <div class="sidebar-links">
      <ul>
        <div class="active-tab"></div>
        <li class="tooltip-element" data-tooltip="0">
          <a href="#" class="active" data-active="0">
            <div class="icon">
              <i class='bx bx-tachometer'></i>
              <i class='bx bxs-tachometer'></i>
            </div>
            <span class="link hide">Dashboard</span>
          </a>
        </li>
        <li class="tooltip-element" data-tooltip="1">
          <a href="#" data-active="1">
            <div class="icon">
              <i class='bx bx-folder'></i>
              <i class='bx bxs-folder'></i>
            </div>
            <span class="link hide">Projects</span>
          </a>
        </li>
        <li class="tooltip-element" data-tooltip="2">
          <a href="#" data-active="2">
            <div class="icon">
              <i class='bx bx-message-square-detail'></i>
              <i class='bx bxs-message-square-detail'></i>
            </div>
            <span class="link hide">Messages</span>
          </a>
        </li>

        <div class="tooltip">
          <span class="show">Dashboard</span>
          <span>Projects</span>
          <span>Messages</span>
          <span>Analytics</span>
        </div>
      </ul>

      <h4 class="hide">Shortcuts</h4>

      <ul>

        <li class="tooltip-element" data-tooltip="1">
          <a href="#" data-active="5">
            <div class="icon">
              <i class='bx bx-help-circle'></i>
              <i class='bx bxs-help-circle'></i>
            </div>
            <span class="link hide">Help</span>
          </a>
        </li>
        <li class="tooltip-element" data-tooltip="2">
          <a href="#" data-active="6">
            <div class="icon">
              <i class='bx bx-cog'></i>
              <i class='bx bxs-cog'></i>
            </div>
            <span class="link hide">Settings</span>
          </a>
        </li>
        <div class="tooltip">
          <span class="show">Tasks</span>
          <span>Help</span>
          <span>Settings</span>
        </div>
      </ul>
    </div>

    <div class="sidebar-footer">
      <a href="#" class="account tooltip-element" data-tooltip="0">
        <i class='bx bx-user'></i>
      </a>
      <div class="admin-user tooltip-element" data-tooltip="1">
        <div class="admin-profile hide">
          <img src="./img/face-1.png" alt="">
          <div class="admin-info">
            <h3>John Doe</h3>
            <h5>Admin</h5>
          </div>
        </div>
        <a href="/register" class="log-out">
          <i class='bx bx-log-out'></i>
        </a>
      </div>
      <div class="tooltip">
        <span class="show">John Doe</span>
        <span>Logout</span>
      </div>
    </div>
  </nav>
  <main>


    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
    </style>

    </head>

    <body>
      <style>
        #btn-spin {
          font: bold 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
          background-color: #10c065;
          color: #fff;
          position: absolute;
          top: 20px;
          left: 35%;
          z-index: 1;
          border: none;
          width: 200px;
          margin-left: -100px;
          display: block;
          cursor: pointer;
          padding: 10px 20px;
          border-radius: 3px;
        }

        #btn-spin:hover {
          background-color: #43f160;
        }

        .calculation-box {

          position: absolute;
          bottom: 20px;
          left: 10px;
          background-color: rgba(255, 255, 255, 0.9);
          padding: 15px;
          text-align: center;
        }

        p {
          font-family: 'Open Sans';
          margin: 0;
          font-size: 13px;
        }
      </style>
      <script src="https://unpkg.com/@turf/turf@6/turf.min.js"></script>
      <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.0/mapbox-gl-draw.js"></script>
      <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.0/mapbox-gl-draw.css"
        type="text/css">

     
      <div class="modal" id="myModal" style="position: absolute;z-index: 9999;left: 300px;display: none;background-color: rgb(255, 255, 255);">
        <div class="modal-content">
         Ajouter votre pacrelle a la base de donnees
        
        <label> Nom de Propriétaire</label>
        <input type="text" id="nameInput" name="nameInput" >
        <label> Région</label>
        <input type="text" id="region" name="nregion" >
        <label> Numéro de pacrelle </label>
        <input type="text" id="numero" name="numero" >
        <label> Type d'agriculture</label>
        <input type="text" id="type" name="type" >
        <button id="save_polygon">Save</button>
        
      </div>
      </div>
      <style>
.modal-content{
  background: transparent;
}  

.modal {

	margin: auto auto;
	padding: 40px;
	border-radius: 5px;
	box-shadow: 0 0 10px #000;
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	width: 500px;
	height: 430px;
}

.modal input {
  padding: 10px;
			margin-bottom: 20px;
			border: none;
			border-radius: 5px;
			background-color: #f2f2f2;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.modal label {
	display: block;
			margin-bottom: 10px;
}



.modal button {
	padding: 10px 20px;
			border: none;
			border-radius: 5px;
			background-color: #4CAF50;
			color: #fff;
			font-weight: bold;
			cursor: pointer;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

      </style>
      <div id="map"></div>
      <div id="directions"></div>
      <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiZ2VvbWZsZWkiLCJhIjoiY2pyeTVxajVwMHMycjQ0bTFkam10dGFobCJ9.9_GhakivE2CB-s-eK4HVSA';
        const map = new mapboxgl.Map({
          container: 'map',
          style: 'mapbox://styles/mapbox/satellite-v9',
          projection: 'globe', // Display the map as a globe, since satellite-v9 defaults to Mercator
          zoom: 1.5,
          center: [-90, 40]

        });
        const draw = new MapboxDraw({
          displayControlsDefault: true,
          // Select which mapbox-gl-draw control buttons to add to the map.
          controls: {
            polygon: true,
            trash: true
          },
          // Set mapbox-gl-draw to draw by default.
          // The user does not have to click the polygon control button first.
          defaultMode: 'draw_polygon'
        });
        map.addControl(draw, 'top-left');
        map.on('draw.delete', updateArea);
        map.on('draw.update', updateArea);

        var modal = document.getElementById("myModal");
        var saveDataInpolygon = document.getElementById("save_polygon");
        var inputName = document.getElementById("nameInput");
        var inputRegion = document.getElementById("region");
        var inputNumero = document.getElementById("numero");
        var inputType = document.getElementById("type");
        map.on('draw.create', function (event) {
          var feature = event.features[0];
          if (feature.geometry.type === 'Polygon') {
            console.log(feature);
            var polygonCoordinates = feature.geometry.coordinates;
            console.log(polygonCoordinates);
            draw.add(feature);
            modal.style.display = "block";
            saveDataInpolygon.onclick = function () {
              feature.properties.name= inputName.value;
              feature.properties.re= inputRegion.value;
              feature.properties.name= inputNumero.value;
              feature.properties.name= inputType.value;
              draw.add(feature);
              inputName.value=''; 
              inputRegion.value='' ;
              inputNumero.value='';
              inputType.value='';
               
            }
            
            window.onclick = function (event) {
              if (event.target == modal) {
                modal.style.display = "none";
               
              }
            }
          }
        });


        map.on('draw.create', function (event) {
          var feature = event.features[0];
          if (feature.geometry.type === 'Point') {
            var pointsCoordinates = feature.geometry.coordinates;
            console.log(pointsCoordinates);

          }
        });

        map.on('draw.create', function (event) {
          var feature = event.features[0];
          if (feature.geometry.type === 'LineString') {
            var lineCoordinates = feature.geometry.coordinates;
            console.log(lineCoordinates);

          }
        });
        //   function addPropertiesOnDraw(map, draw) {
        //   map.on('draw.create', function (event) {
        //   var feature = event.features[0];
        // var featureName = prompt("Enter a name for the feature:");
        //feature.properties.name = featureName;
        //draw.add(feature);
        //});
        //}

        /*function addMarker(map) {
          map.on('click', function (e) {
            var markerName = prompt("Enter a name for the marker:");
            var marker = new mapboxgl.Marker()
              .setLngLat(e.lngLat)
              .setPopup(new mapboxgl.Popup().setHTML(markerName))
              .addTo(map);
          });
        }
        
        addMarker(map);*/
        /*function addPropertiesToFeature(map, featureId) {
          // Get the feature from the map data
          var feature = map.getSource('my-data-source')._data.features.find(function (f) {
            return f.id === featureId;
          });

          // Create a new HTML form
          var form = document.createElement('form');
          form.id = 'properties-form';

          // Add a text input field for the feature name
          var nameLabel = document.createElement('label');
          nameLabel.textContent = 'Name:';
          var nameInput = document.createElement('input');
          nameInput.type = 'text';
          nameInput.name = 'name';
          nameLabel.appendChild(nameInput);
          form.appendChild(nameLabel);

          // Add a number input field for the feature age
          var ageLabel = document.createElement('label');
          ageLabel.textContent = 'Age:';
          var ageInput = document.createElement('input');
          ageInput.type = 'number';
          ageInput.name = 'age';
          ageLabel.appendChild(ageInput);
          form.appendChild(ageLabel);

          // Add a submit button to save the properties
          var submitButton = document.createElement('button');
          submitButton.type = 'submit';
          submitButton.textContent = 'Save Properties';
          form.appendChild(submitButton);

          // Add an event listener to the form submit button
          form.addEventListener('submit', function (event) {
            event.preventDefault();
            var formData = new FormData(event.target);
            var properties = {
              name: formData.get('name'),
              age: parseInt(formData.get('age'))
            };
            feature.properties = properties;

            // Update the feature in the map data
            map.getSource('my-data-source').setData(map.getSource('my-data-source')._data);

            console.log('Feature properties:', feature.properties);
          });

          // Add the form to the Mapbox map
          var formContainer = document.createElement('div');
          formContainer.appendChild(form);
          map.getContainer().appendChild(formContainer);
        }

*/
        function updateArea(e) {
          const data = draw.getAll();
          const answer = document.getElementById('directions');
          if (data.features.length > 0) {
            const area = turf.area(data);
            // Restrict the area to 2 decimal points.
            const rounded_area = Math.round(area * 100) / 100;
            answer.innerHTML = `<p><strong>${rounded_area}</strong></p><p>square meters</p>`;
          } else {
            answer.innerHTML = '';
            if (e.type !== 'draw.delete')
              alert('Click the map to draw a polygon.');
          }
        }



        // Add the draw tool to the map.
        map.on('style.load', () => {
          map.setFog({}); // Set the default atmosphere style
        });

        // The following values can be changed to control rotation speed:

        // At low zooms, complete a revolution every two minutes.
        const secondsPerRevolution = 120;
        // Above zoom level 5, do not rotate.
        const maxSpinZoom = 2;
        // Rotate at intermediate speeds between zoom levels 3 and 5.
        const slowSpinZoom = 3;

        let userInteracting = false;
        let spinEnabled = true;

        function spinGlobe() {
          const zoom = map.getZoom();
          if (spinEnabled && !userInteracting && zoom < maxSpinZoom) {
            let distancePerSecond = 360 / secondsPerRevolution;
            if (zoom > slowSpinZoom) {
              // Slow spinning at higher zooms
              const zoomDif =
                (maxSpinZoom - zoom) / (maxSpinZoom - slowSpinZoom);
              distancePerSecond *= zoomDif;
            }
            const center = map.getCenter();
            center.lng -= distancePerSecond;
            // Smoothly animate the map over one second.
            // When this animation is complete, it calls a 'moveend' event.
            map.easeTo({ center, duration: 1000, easing: (n) => n });
          }
        }

        // Pause spinning on interaction
        map.on('mousedown', () => {
          userInteracting = true;
        });

        // Restart spinning the globe when interaction is complete
        map.on('mouseup', () => {
          userInteracting = false;
          spinGlobe();
        });

        // These events account for cases where the mouse has moved
        // off the map, so 'mouseup' will not be fired.
        map.on('dragend', () => {
          userInteracting = false;
          spinGlobe();
        });
        map.on('pitchend', () => {
          userInteracting = false;
          spinGlobe();
        });
        map.on('rotateend', () => {
          userInteracting = false;
          spinGlobe();
        });

        // When animation is complete, start spinning if there is no ongoing interaction
        map.on('moveend', () => {
          spinGlobe();
        });
        spinGlobe();

      </script>

    </body>
  </main>

  <script src="js/app.js"></script>
</body>

</html>